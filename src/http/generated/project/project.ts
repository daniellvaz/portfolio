/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Error,
  GetProjectsParams,
  ProjectListResponse,
  ProjectRequest,
  ProjectResponse
} from '../api.schemas';

import getProjectsMutator from '../../../libs/axios';
import type { ErrorType as GetProjectsErrorType } from '../../../libs/axios';
import postProjectsMutator from '../../../libs/axios';
import type { ErrorType as PostProjectsErrorType } from '../../../libs/axios';
import getProjectsIdMutator from '../../../libs/axios';
import type { ErrorType as GetProjectsIdErrorType } from '../../../libs/axios';
import putProjectsIdMutator from '../../../libs/axios';
import type { ErrorType as PutProjectsIdErrorType } from '../../../libs/axios';
import deleteProjectsIdMutator from '../../../libs/axios';
import type { ErrorType as DeleteProjectsIdErrorType } from '../../../libs/axios';




export const getProjects = (
    params?: GetProjectsParams,
 signal?: AbortSignal
) => {
      
      
      return getProjectsMutator<ProjectListResponse>(
      {url: `/projects`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetProjectsQueryKey = (params?: GetProjectsParams,) => {
    return [`/projects`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProjectsQueryOptions = <TData = Awaited<ReturnType<typeof getProjects>>, TError = GetProjectsErrorType<Error>>(params?: GetProjectsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjects>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjects>>> = ({ signal }) => getProjects(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjects>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectsQueryResult = NonNullable<Awaited<ReturnType<typeof getProjects>>>
export type GetProjectsQueryError = GetProjectsErrorType<Error>


export function useGetProjects<TData = Awaited<ReturnType<typeof getProjects>>, TError = GetProjectsErrorType<Error>>(
 params: undefined |  GetProjectsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjects>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjects>>,
          TError,
          Awaited<ReturnType<typeof getProjects>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjects<TData = Awaited<ReturnType<typeof getProjects>>, TError = GetProjectsErrorType<Error>>(
 params?: GetProjectsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjects>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjects>>,
          TError,
          Awaited<ReturnType<typeof getProjects>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjects<TData = Awaited<ReturnType<typeof getProjects>>, TError = GetProjectsErrorType<Error>>(
 params?: GetProjectsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjects>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjects<TData = Awaited<ReturnType<typeof getProjects>>, TError = GetProjectsErrorType<Error>>(
 params?: GetProjectsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjects>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postProjects = (
    projectRequest: ProjectRequest,
 signal?: AbortSignal
) => {
      
      
      return postProjectsMutator<ProjectResponse>(
      {url: `/projects`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: projectRequest, signal
    },
      );
    }
  


export const getPostProjectsMutationOptions = <TError = PostProjectsErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjects>>, TError,{data: ProjectRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postProjects>>, TError,{data: ProjectRequest}, TContext> => {

const mutationKey = ['postProjects'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postProjects>>, {data: ProjectRequest}> = (props) => {
          const {data} = props ?? {};

          return  postProjects(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostProjectsMutationResult = NonNullable<Awaited<ReturnType<typeof postProjects>>>
    export type PostProjectsMutationBody = ProjectRequest
    export type PostProjectsMutationError = PostProjectsErrorType<Error>

    export const usePostProjects = <TError = PostProjectsErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postProjects>>, TError,{data: ProjectRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postProjects>>,
        TError,
        {data: ProjectRequest},
        TContext
      > => {

      const mutationOptions = getPostProjectsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getProjectsId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return getProjectsIdMutator<ProjectResponse>(
      {url: `/projects/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetProjectsIdQueryKey = (id: number,) => {
    return [`/projects/${id}`] as const;
    }

    
export const getGetProjectsIdQueryOptions = <TData = Awaited<ReturnType<typeof getProjectsId>>, TError = GetProjectsIdErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProjectsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProjectsId>>> = ({ signal }) => getProjectsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProjectsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProjectsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getProjectsId>>>
export type GetProjectsIdQueryError = GetProjectsIdErrorType<Error>


export function useGetProjectsId<TData = Awaited<ReturnType<typeof getProjectsId>>, TError = GetProjectsIdErrorType<Error>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectsId>>,
          TError,
          Awaited<ReturnType<typeof getProjectsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectsId<TData = Awaited<ReturnType<typeof getProjectsId>>, TError = GetProjectsIdErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProjectsId>>,
          TError,
          Awaited<ReturnType<typeof getProjectsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProjectsId<TData = Awaited<ReturnType<typeof getProjectsId>>, TError = GetProjectsIdErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetProjectsId<TData = Awaited<ReturnType<typeof getProjectsId>>, TError = GetProjectsIdErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProjectsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProjectsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putProjectsId = (
    id: number,
    projectRequest: ProjectRequest,
 ) => {
      
      
      return putProjectsIdMutator<ProjectResponse>(
      {url: `/projects/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: projectRequest
    },
      );
    }
  


export const getPutProjectsIdMutationOptions = <TError = PutProjectsIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProjectsId>>, TError,{id: number;data: ProjectRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putProjectsId>>, TError,{id: number;data: ProjectRequest}, TContext> => {

const mutationKey = ['putProjectsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putProjectsId>>, {id: number;data: ProjectRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putProjectsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutProjectsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putProjectsId>>>
    export type PutProjectsIdMutationBody = ProjectRequest
    export type PutProjectsIdMutationError = PutProjectsIdErrorType<Error>

    export const usePutProjectsId = <TError = PutProjectsIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putProjectsId>>, TError,{id: number;data: ProjectRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putProjectsId>>,
        TError,
        {id: number;data: ProjectRequest},
        TContext
      > => {

      const mutationOptions = getPutProjectsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteProjectsId = (
    id: number,
 ) => {
      
      
      return deleteProjectsIdMutator<number>(
      {url: `/projects/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteProjectsIdMutationOptions = <TError = DeleteProjectsIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProjectsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteProjectsId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteProjectsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteProjectsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteProjectsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteProjectsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteProjectsId>>>
    
    export type DeleteProjectsIdMutationError = DeleteProjectsIdErrorType<Error>

    export const useDeleteProjectsId = <TError = DeleteProjectsIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteProjectsId>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteProjectsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteProjectsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    