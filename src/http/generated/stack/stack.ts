/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Error,
  GetStacksParams,
  StackListResponse,
  StackRequest,
  StackResponse
} from '../api.schemas';

import getStacksMutator from '../../../libs/axios';
import type { ErrorType as GetStacksErrorType } from '../../../libs/axios';
import postStacksMutator from '../../../libs/axios';
import type { ErrorType as PostStacksErrorType } from '../../../libs/axios';
import getStacksIdMutator from '../../../libs/axios';
import type { ErrorType as GetStacksIdErrorType } from '../../../libs/axios';
import putStacksIdMutator from '../../../libs/axios';
import type { ErrorType as PutStacksIdErrorType } from '../../../libs/axios';
import deleteStacksIdMutator from '../../../libs/axios';
import type { ErrorType as DeleteStacksIdErrorType } from '../../../libs/axios';




export const getStacks = (
    params?: GetStacksParams,
 signal?: AbortSignal
) => {
      
      
      return getStacksMutator<StackListResponse>(
      {url: `/stacks`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetStacksQueryKey = (params?: GetStacksParams,) => {
    return [`/stacks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStacksQueryOptions = <TData = Awaited<ReturnType<typeof getStacks>>, TError = GetStacksErrorType<Error>>(params?: GetStacksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacks>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStacksQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStacks>>> = ({ signal }) => getStacks(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStacks>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStacksQueryResult = NonNullable<Awaited<ReturnType<typeof getStacks>>>
export type GetStacksQueryError = GetStacksErrorType<Error>


export function useGetStacks<TData = Awaited<ReturnType<typeof getStacks>>, TError = GetStacksErrorType<Error>>(
 params: undefined |  GetStacksParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacks>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStacks>>,
          TError,
          Awaited<ReturnType<typeof getStacks>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStacks<TData = Awaited<ReturnType<typeof getStacks>>, TError = GetStacksErrorType<Error>>(
 params?: GetStacksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacks>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStacks>>,
          TError,
          Awaited<ReturnType<typeof getStacks>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStacks<TData = Awaited<ReturnType<typeof getStacks>>, TError = GetStacksErrorType<Error>>(
 params?: GetStacksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacks>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetStacks<TData = Awaited<ReturnType<typeof getStacks>>, TError = GetStacksErrorType<Error>>(
 params?: GetStacksParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacks>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStacksQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postStacks = (
    stackRequest: StackRequest,
 signal?: AbortSignal
) => {
      
      
      return postStacksMutator<StackResponse>(
      {url: `/stacks`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: stackRequest, signal
    },
      );
    }
  


export const getPostStacksMutationOptions = <TError = PostStacksErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStacks>>, TError,{data: StackRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postStacks>>, TError,{data: StackRequest}, TContext> => {

const mutationKey = ['postStacks'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStacks>>, {data: StackRequest}> = (props) => {
          const {data} = props ?? {};

          return  postStacks(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStacksMutationResult = NonNullable<Awaited<ReturnType<typeof postStacks>>>
    export type PostStacksMutationBody = StackRequest
    export type PostStacksMutationError = PostStacksErrorType<Error>

    export const usePostStacks = <TError = PostStacksErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStacks>>, TError,{data: StackRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postStacks>>,
        TError,
        {data: StackRequest},
        TContext
      > => {

      const mutationOptions = getPostStacksMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getStacksId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return getStacksIdMutator<StackResponse>(
      {url: `/stacks/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetStacksIdQueryKey = (id: number,) => {
    return [`/stacks/${id}`] as const;
    }

    
export const getGetStacksIdQueryOptions = <TData = Awaited<ReturnType<typeof getStacksId>>, TError = GetStacksIdErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacksId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStacksIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStacksId>>> = ({ signal }) => getStacksId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStacksId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetStacksIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStacksId>>>
export type GetStacksIdQueryError = GetStacksIdErrorType<Error>


export function useGetStacksId<TData = Awaited<ReturnType<typeof getStacksId>>, TError = GetStacksIdErrorType<Error>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacksId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStacksId>>,
          TError,
          Awaited<ReturnType<typeof getStacksId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStacksId<TData = Awaited<ReturnType<typeof getStacksId>>, TError = GetStacksIdErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacksId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStacksId>>,
          TError,
          Awaited<ReturnType<typeof getStacksId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetStacksId<TData = Awaited<ReturnType<typeof getStacksId>>, TError = GetStacksIdErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacksId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetStacksId<TData = Awaited<ReturnType<typeof getStacksId>>, TError = GetStacksIdErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStacksId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetStacksIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putStacksId = (
    id: number,
    stackRequest: StackRequest,
 ) => {
      
      
      return putStacksIdMutator<StackResponse>(
      {url: `/stacks/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: stackRequest
    },
      );
    }
  


export const getPutStacksIdMutationOptions = <TError = PutStacksIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStacksId>>, TError,{id: number;data: StackRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putStacksId>>, TError,{id: number;data: StackRequest}, TContext> => {

const mutationKey = ['putStacksId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStacksId>>, {id: number;data: StackRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putStacksId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStacksIdMutationResult = NonNullable<Awaited<ReturnType<typeof putStacksId>>>
    export type PutStacksIdMutationBody = StackRequest
    export type PutStacksIdMutationError = PutStacksIdErrorType<Error>

    export const usePutStacksId = <TError = PutStacksIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStacksId>>, TError,{id: number;data: StackRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putStacksId>>,
        TError,
        {id: number;data: StackRequest},
        TContext
      > => {

      const mutationOptions = getPutStacksIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteStacksId = (
    id: number,
 ) => {
      
      
      return deleteStacksIdMutator<number>(
      {url: `/stacks/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteStacksIdMutationOptions = <TError = DeleteStacksIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStacksId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteStacksId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteStacksId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStacksId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteStacksId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteStacksIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStacksId>>>
    
    export type DeleteStacksIdMutationError = DeleteStacksIdErrorType<Error>

    export const useDeleteStacksId = <TError = DeleteStacksIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStacksId>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteStacksId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteStacksIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    