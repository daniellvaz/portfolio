/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ContactListResponse,
  ContactRequest,
  ContactResponse,
  Error,
  GetContactsParams
} from '../api.schemas';

import getContactsMutator from '../../../libs/axios';
import type { ErrorType as GetContactsErrorType } from '../../../libs/axios';
import postContactsMutator from '../../../libs/axios';
import type { ErrorType as PostContactsErrorType } from '../../../libs/axios';
import getContactsIdMutator from '../../../libs/axios';
import type { ErrorType as GetContactsIdErrorType } from '../../../libs/axios';
import putContactsIdMutator from '../../../libs/axios';
import type { ErrorType as PutContactsIdErrorType } from '../../../libs/axios';
import deleteContactsIdMutator from '../../../libs/axios';
import type { ErrorType as DeleteContactsIdErrorType } from '../../../libs/axios';




export const getContacts = (
    params?: GetContactsParams,
 signal?: AbortSignal
) => {
      
      
      return getContactsMutator<ContactListResponse>(
      {url: `/contacts`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetContactsQueryKey = (params?: GetContactsParams,) => {
    return [`/contacts`, ...(params ? [params]: [])] as const;
    }

    
export const getGetContactsQueryOptions = <TData = Awaited<ReturnType<typeof getContacts>>, TError = GetContactsErrorType<Error>>(params?: GetContactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContacts>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContactsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContacts>>> = ({ signal }) => getContacts(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContacts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContactsQueryResult = NonNullable<Awaited<ReturnType<typeof getContacts>>>
export type GetContactsQueryError = GetContactsErrorType<Error>


export function useGetContacts<TData = Awaited<ReturnType<typeof getContacts>>, TError = GetContactsErrorType<Error>>(
 params: undefined |  GetContactsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContacts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContacts>>,
          TError,
          Awaited<ReturnType<typeof getContacts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContacts<TData = Awaited<ReturnType<typeof getContacts>>, TError = GetContactsErrorType<Error>>(
 params?: GetContactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContacts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContacts>>,
          TError,
          Awaited<ReturnType<typeof getContacts>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContacts<TData = Awaited<ReturnType<typeof getContacts>>, TError = GetContactsErrorType<Error>>(
 params?: GetContactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContacts>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetContacts<TData = Awaited<ReturnType<typeof getContacts>>, TError = GetContactsErrorType<Error>>(
 params?: GetContactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContacts>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContactsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postContacts = (
    contactRequest: ContactRequest,
 signal?: AbortSignal
) => {
      
      
      return postContactsMutator<ContactResponse>(
      {url: `/contacts`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: contactRequest, signal
    },
      );
    }
  


export const getPostContactsMutationOptions = <TError = PostContactsErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContacts>>, TError,{data: ContactRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postContacts>>, TError,{data: ContactRequest}, TContext> => {

const mutationKey = ['postContacts'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postContacts>>, {data: ContactRequest}> = (props) => {
          const {data} = props ?? {};

          return  postContacts(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostContactsMutationResult = NonNullable<Awaited<ReturnType<typeof postContacts>>>
    export type PostContactsMutationBody = ContactRequest
    export type PostContactsMutationError = PostContactsErrorType<Error>

    export const usePostContacts = <TError = PostContactsErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postContacts>>, TError,{data: ContactRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postContacts>>,
        TError,
        {data: ContactRequest},
        TContext
      > => {

      const mutationOptions = getPostContactsMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getContactsId = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return getContactsIdMutator<ContactResponse>(
      {url: `/contacts/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetContactsIdQueryKey = (id: number,) => {
    return [`/contacts/${id}`] as const;
    }

    
export const getGetContactsIdQueryOptions = <TData = Awaited<ReturnType<typeof getContactsId>>, TError = GetContactsIdErrorType<Error>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetContactsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getContactsId>>> = ({ signal }) => getContactsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getContactsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetContactsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getContactsId>>>
export type GetContactsIdQueryError = GetContactsIdErrorType<Error>


export function useGetContactsId<TData = Awaited<ReturnType<typeof getContactsId>>, TError = GetContactsIdErrorType<Error>>(
 id: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContactsId>>,
          TError,
          Awaited<ReturnType<typeof getContactsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContactsId<TData = Awaited<ReturnType<typeof getContactsId>>, TError = GetContactsIdErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContactsId>>,
          TError,
          Awaited<ReturnType<typeof getContactsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetContactsId<TData = Awaited<ReturnType<typeof getContactsId>>, TError = GetContactsIdErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetContactsId<TData = Awaited<ReturnType<typeof getContactsId>>, TError = GetContactsIdErrorType<Error>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getContactsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetContactsIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putContactsId = (
    id: number,
    contactRequest: ContactRequest,
 ) => {
      
      
      return putContactsIdMutator<ContactResponse>(
      {url: `/contacts/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: contactRequest
    },
      );
    }
  


export const getPutContactsIdMutationOptions = <TError = PutContactsIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContactsId>>, TError,{id: number;data: ContactRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putContactsId>>, TError,{id: number;data: ContactRequest}, TContext> => {

const mutationKey = ['putContactsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putContactsId>>, {id: number;data: ContactRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putContactsId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutContactsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putContactsId>>>
    export type PutContactsIdMutationBody = ContactRequest
    export type PutContactsIdMutationError = PutContactsIdErrorType<Error>

    export const usePutContactsId = <TError = PutContactsIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putContactsId>>, TError,{id: number;data: ContactRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putContactsId>>,
        TError,
        {id: number;data: ContactRequest},
        TContext
      > => {

      const mutationOptions = getPutContactsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteContactsId = (
    id: number,
 ) => {
      
      
      return deleteContactsIdMutator<number>(
      {url: `/contacts/${id}`, method: 'DELETE'
    },
      );
    }
  


export const getDeleteContactsIdMutationOptions = <TError = DeleteContactsIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContactsId>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof deleteContactsId>>, TError,{id: number}, TContext> => {

const mutationKey = ['deleteContactsId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteContactsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteContactsId(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteContactsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteContactsId>>>
    
    export type DeleteContactsIdMutationError = DeleteContactsIdErrorType<Error>

    export const useDeleteContactsId = <TError = DeleteContactsIdErrorType<Error>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteContactsId>>, TError,{id: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteContactsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteContactsIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    